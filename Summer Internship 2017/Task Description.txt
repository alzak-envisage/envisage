================================================================================

SUMMER INTERNSHIP - MIKHAIL ZAKHAROV - TASK DESCRIPTION

================================================================================

--------------------------------------------------------------------------------
OVERVIEW
--------------------------------------------------------------------------------

The goal of your summer internship project is to launch Envisage company website
that will be based on a new and improved MVC architecture. The main motivation
for doing this is to improve website's maintainability by making it modular.

--------------------------------------------------------------------------------

================================================================================

STEP-BY-STEP GUIDE

================================================================================

This guide is meant to guide you throughout your project. It outlines the main
tasks and explains how to do them. It should be followed in a chronological
fashion, but you are free to work on tasks in any order, if it makes sense.

Below you will find a list of tasks that are arranged into subtasks with help
and explanation along the way. As you go along, remember to check all of the
subtasks. Once all subtasks are completed, you can check off the main task.
Mark a task or subtask completed by inserting a cross inside the parentheses.

--------------------------------------------------------------------------------
( ) TASK 1 - HOME DIRECTORY BACKUP
--------------------------------------------------------------------------------

Your first task is to create a local copy of the envisage website. This local
copy will act as a backup and a reference for your further work.

- ( ) Log into cPanel on the server

- ( ) Navigate to Files -> Backups in cPanel

- ( ) Locate 'Download a Home Directory Backup' and click download button

		NOTE:	You do not need to create a full backup of the website, a partial
				backup will suffice. Since the website is currently not linked
				to a database, you only need to make a backup of home directory.

- ( ) Delete all unnecessary folders in the downloaded backup

		NOTE:	The only folder you will need is called 'public_html'. The other
				folders can be safely deleted.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 2 - SET UP YOUR DEVELOPMENT ENVIRONMENT
--------------------------------------------------------------------------------

Your next task is set up a local development environment using XAMPP. This will
provide you with a server-like environment with access to phpMyAdmin and PHP.

- ( ) Install XAMPP on your machine if you have not already done so.

- ( ) Navigate to 'localhost/phpmyadmin' in your browser to access phpMyAdmin

		NOTE:	phpMyAdmin is a visual interface that allows you to work with
				databases. Since Envisage website contains some sensitive
				information, it is best to secure your local phpMyAdmin with a
				password.

- ( ) Navigate to 'User accounts' tab at the top of phpMyAdmin

- ( ) Set the same password to all accounts with username 'root'

		NOTE:	Remember this password, because you will later use it in your
				PHP application to allow it to connect to your local database.

- ( ) Create a new database with 'utf8_unicode_ci' collation

		NOTE:	You are free to chose the name for your local database. On the
				server, the database will be called 'zakharov_dbname'. So, to
				avoid issues when migrating to real server, use the above name
				convention.

- ( ) Create a new directory in 'htdocs'

		NOTE:	This is where you will keep all of your work on your local
				server. It can be accessed by navigating to 'localhost/envisage'
				in your browser.

- ( ) Create two subdirectories in your folder:

	- ( ) 'envisage' directory

	- ( ) 'public_html' directory

		NOTE:	'envisage' folder will contain the MVC application. On the real
				server, it will not be accessible to the public. On the other
				hand, 'public_html' will simulate your public folder on the
				server. Public folder is accessed when you type 'envisage.no'
				in your browser. In order to access your local files, type
				'localhost/yourfoldername/public_html'.

		- ( ) Create an 'index.php' file in 'public_html' folder

		- ( ) Create a '.htaccess' file in 'public_html' folder

		NOTE:	This is a special file. Note the dot in the beginning. In a
				Linux system, it indicates a hidden file. The easiest way to
				create it is using Atom. When prompted to enter a file name,
				you must explicitly write '.htaccess'.

		- ( ) Create a 'src' folder in 'public_html' folder

		NOTE:	This will contain all images, CSS and JS file that will be
				accessible to the client.

- ( ) Place an echo statement into 'index.php' file and test that it works

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 3 - SET UP YOUR FOLDER STRUCTURE AND HTACCESS FILES
--------------------------------------------------------------------------------

Now that you have set up you local development environment, it is time to set up
a folder structure for your MVC application. The MVC application will reside in
'envisage' folder. After creating the folder structure, you will secure the
folders with '.htaccess' files.

- ( ) Create a folder structure as shown below:

		yourfoldername
			|
			+-- envisage
			|	|
			|	+-- components
			|	|
			|	+-- config
			|	|
			|	+-- controllers
			|	|
			|	+-- models
			|	|
			|	+-- views
			|	|	|
			|	|	+-- layout
			|	|	|
			|	|	+-- main
			|	|
			|	+-- template
			|
			|
			+-- public_html
				|
				+-- index.php
				|
				+-- .htaccess
				|
				+-- src
					|
					+-- css
					|
					+-- js
					|
					+-- images

		NOTE:	The idea behind such folder structure is to separate files that
				should not be accessible to clients and files that must be
				accessible (e.g. 'src' folder contents).

- ( ) Create an '.htaccess' file in the following folders:

		NOTE:	These '.htaccess' files will act as an additional layer of
				protection for our website. '.htaccess' files are only read by
				the	server and contain various instructions about server's
				behaviour.

		NOTE:	These '.htaccess' files will be slightly different that the one
				you created in 'public_html' folder. We will get to that one
				later. For now, these '.htaccess' files must contain the
				following text (dashed lines are beginning and end of file and
				everything after '#' is a comment in that language):

				----------------------------------------------------------------
				# Deny all access to this directory
				Deny from all

				# Set default character set to UTF-8
				AddDefaultCharset utf-8

				# Strong protection for htaccess file
				<Files ~ ".*\.([Hh][Tt][Aa])">
					Order allow,deny
					Deny from all
					Satisfy all
				</Files>

				# Block access to files that can expose sensitive information.
				<FilesMatch "(^#.*#|\.(bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$">
					Order allow,deny
					Deny from all
					Satisfy all
				</FilesMatch>

				# Disable pattern matching based on filenames
				Options -MultiViews

				# Block access to directories without a default document
				Options -Indexes
				----------------------------------------------------------------

	- ( ) 'yourfoldername/envisage'

	- ( ) 'yourfoldername/envisage/components'

	- ( ) 'yourfoldername/envisage/config'

	- ( ) 'yourfoldername/envisage/controllers'

	- ( ) 'yourfoldername/envisage/models'

	- ( ) 'yourfoldername/envisage/views'

	- ( ) 'yourfoldername/envisage/template'

- ( ) Modify '.htaccess' file in 'public_html' folder:

		NOTE:	This '.htaccess' file has a slightly different purpose. Its
				main objective is to direct the client to the correct view.
				Insert the following text (dashed lines are beginning and end of
				file and everything after '#' is a comment in that language):

				----------------------------------------------------------------
				# Set default character set to UTF-8
				AddDefaultCharset utf-8

				# Strong protection for htaccess file
				<Files ~ ".*\.([Hh][Tt][Aa])">
					Order allow,deny
					Deny from all
					Satisfy all
				</Files>

				# Block access to files that can expose sensitive information.
				<FilesMatch "(^#.*#|\.(bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$">
					Order allow,deny
					Deny from all
					Satisfy all
				</FilesMatch>

				# Prevent some browsers from MIME-sniffing the response
				Header set X-Content-Type-Options "nosniff"

				# Remove the `X-Powered-By` response header
				Header unset X-Powered-By

				# Turn server signature off
				ServerSignature Off

				# Serve resources with far-future expires headers
				ExpiresActive on
				ExpiresDefault                                      "access plus 1 month"
				ExpiresByType text/css                              "access plus 1 year"
				ExpiresByType application/atom+xml                  "access plus 1 hour"
				ExpiresByType application/rdf+xml                   "access plus 1 hour"
				ExpiresByType application/rss+xml                   "access plus 1 hour"
				ExpiresByType application/json                      "access plus 0 seconds"
				ExpiresByType application/ld+json                   "access plus 0 seconds"
				ExpiresByType application/schema+json               "access plus 0 seconds"
				ExpiresByType application/vnd.geo+json              "access plus 0 seconds"
				ExpiresByType application/xml                       "access plus 0 seconds"
				ExpiresByType text/xml                              "access plus 0 seconds"
				ExpiresByType text/html                             "access plus 0 seconds"
				ExpiresByType application/javascript                "access plus 1 year"
				ExpiresByType application/x-javascript              "access plus 1 year"
				ExpiresByType text/javascript                       "access plus 1 year"
				ExpiresByType audio/ogg                             "access plus 1 month"
				ExpiresByType image/bmp                             "access plus 1 month"
				ExpiresByType image/gif                             "access plus 1 month"
				ExpiresByType image/jpeg                            "access plus 1 month"
				ExpiresByType image/png                             "access plus 1 month"
				ExpiresByType image/svg+xml                         "access plus 1 month"
				ExpiresByType image/webp                            "access plus 1 month"
				ExpiresByType video/mp4                             "access plus 1 month"
				ExpiresByType video/ogg                             "access plus 1 month"
				ExpiresByType video/webm                            "access plus 1 month"
				ExpiresByType application/vnd.ms-fontobject         "access plus 1 month"
				ExpiresByType font/eot                              "access plus 1 month"
				ExpiresByType font/opentype                         "access plus 1 month"
				ExpiresByType application/x-font-ttf                "access plus 1 month"
				ExpiresByType application/font-woff                 "access plus 1 month"
				ExpiresByType application/x-font-woff               "access plus 1 month"
				ExpiresByType font/woff                             "access plus 1 month"
				ExpiresByType application/font-woff2                "access plus 1 month"

				# Disable pattern matching based on filenames
				Options -MultiViews

				# Block access to directories without a default document
				Options -Indexes

				# Turn rewrite engine on
				RewriteEngine on

				# Set rewrite base to main directory
				RewriteBase /

				# Rewrite conditions and rules
				RewriteCond %{REQUEST_FILENAME} !-d
				RewriteCond %{REQUEST_FILENAME} !-f
				RewriteCond %{REQUEST_FILENAME} !-l
				RewriteRule ^(.*)$ index.php
				----------------------------------------------------------------

		NOTE:	For now, comment out all rows that start with 'Expires' by
				inserting a # sign at the start of each line. These instructions
				tell server to cache certain file types. This is not a good idea
				in a development environment.

		NOTE:	You might need to modify 'RewriteBase'. Instead of having just a
				'/' symbol, you will need '/yourfoldername/public_html'. If that
				does not work, consult the internet or me for further help.
				For the sake of simplicity, 'RewriteBase' tells the server where
				to look for your 'index.php' file.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 4 - CONFIGURATION FILE
--------------------------------------------------------------------------------

Having secured the website, it is now time to make a configuration file that
will define some important parameters.

- ( ) Create a 'config.php' file in 'config' folder

		NOTE:	The config file must have the following contents (as you already
				know, dashed lines indicate the beginning and end of file):

				----------------------------------------------------------------
				<?php

				/*
				*	----------------------------------------------------------------------------
				*	DATABASE CONFIGURATION
				*	----------------------------------------------------------------------------
				*/

				// Database name
				define('DB_NAME', 'your_db_name');

				// Database username
				define('DB_USER', 'your_user_name');

				// Database password
				define('DB_PASSWORD', 'your_password');

				// Database host
				define('DB_HOST', 'localhost');

				/*
				*	----------------------------------------------------------------------------
				*	FOR DEVELOPERS
				*	----------------------------------------------------------------------------
				*/

				// Debug mode switch
				define('DEBUG_MODE', false);

				// Path modifier ('/path/', '/' or an absolute path)
				define('PATH_MOD', '/');

				?>
				----------------------------------------------------------------

	- ( ) Insert the correct database name where it says 'your_db_name'

		NOTE:	That is the name of the database you created earlier.

	- ( ) Insert the correct username where it says 'your_user_name'

		NOTE:	Unless you have created a new user yourself, the username should
				be set to 'root'. On the actual server, this will be something
				like 'zakharov_yourusername'.

	- ( ) Insert the correct password where it says 'your_password'

		NOTE:	That is the password you created earlier for user 'root'.

	- ( ) Set the debug mode switch to true

		NOTE:	Debug mode switch is a constant created by me. You will
		 		understand its use when we get to editing 'index.php' file.
				Debug moe is useful in a development environment because you can
				see the errors being printed right in the browser. In a
				production environmen, debug mode will have to be switched off
				for security reasons.

	- ( ) Set the correct path modifier variable

		NOTE:	This is a constant you will use throughout the application. It
				is essentially similar to 'RewriteBase' value you used in your
				'.htaccess' file. In a production environment, set it to:
				'/yourfoldername/public_html/'. Do not forget the trailing '/'
				at the end. In a development environment, however, it should be
				set to a '/'.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 5 - FRONT CONTROLLER
--------------------------------------------------------------------------------

The next step is to edit an 'index.php' file in your 'public_html' folder. This
file will aggregate all requests from the clients. In MVC terms, it is known as
a front controller. Its purpose is to launch a router class that will further
load the correct controller and view.

- ( ) Insert the following content into the 'index.php' file:

		NOTE:	This file will require several other files to work correctly,
				namely 'Autoload.php' and 'Router.php'. For the time being, you
				can comment out these lines as we will get to them later.

				----------------------------------------------------------------
				<?php

				/*
				*	----------------------------------------------------------------------------
				*	FRONT CONTROLLER
				*	----------------------------------------------------------------------------
				*/
					// General settings
					error_reporting(E_ALL);

					// Start session
					session_start();

					// Import of system files
					define('ROOT', dirname(__FILE__));
					require_once(ROOT . '/components/Autoload.php');

					// Load base configuration
					require_once(ROOT . '/config/config.php');

					// Development / Production mode switch
					if (DEBUG_MODE) {

						// Display all errors
						ini_set('display_errors', 1);

					} else {

						// Do not display errors
						ini_set('display_errors', 0);

					}

					// Invoke Router
					$router = new Router();
					$router->run();

				?>
				----------------------------------------------------------------

		NOTE:	You will notice a constant 'ROOT' that is defined in this file.
				It contains the path to the directory where 'index.php' file
				resides. Because we are changing the system, its value is no
				longer correct. You will need to debug it and potentially define
				a new constant. This is an extra credit task that requires
				something thinking and programming expertise on your behalf.

		NOTE:	If all else fails, here is a clue. You will need to look at the
				documentation for 'dirname' function on PHP website. It has an
				optional 'levels' argument. Note that you may have to
				concatenate on 'envisage' to point to the folder with MVC files.

		NOTE:	If you try to access your website in browser, you should see
				some errors. One of them, as mentioned earlier, is because
				'ROOT' constant has an incorrect value. The second error will
				arise because 'Autoload' and 'Router' classes are not yet
				defined. You can comment them for now, we will get to them in
				the next step.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 6 - AUTOLOAD FUNCTION
--------------------------------------------------------------------------------

Now we need to address immediate errors that arise in our 'index.php' file. The
first error we will address is adding an 'Autoload.php' class/function. In oder
to test your code, you can comment out the two lines in 'index.php' that deal
with router class.

'Autoload.php' file is a wrapper for '__autoload' function in PHP. This
function is called when PHP comes across an unknown class you may have created.
It looks for your classes in folders you define and automatically loads them
into your application. Very useful indeed!

- ( ) Create 'Autoload.php' file in 'components' folder

		NOTE:	The contents of the file should be:

				----------------------------------------------------------------
				<?php

					/**
					*	Function __autoload for automatic inclusion of classes
					*/
					function __autoload($class_name) {

						// List of directories in which to look for class
						$array_paths = array(
							'/models/',
							'/components/',
							'/controlers/'
						);

						// Loop through the list of directories
						foreach ($array_paths as $path) {

							// Generate path to a file
							$path = ROOT . $path . $class_name . '.php';

							// Load the file if it exists
							if (is_file($path)) {
								include_once $path;
							}

						}

					}

				?>
				----------------------------------------------------------------

		NOTE:	As you can see, the '__autoload' function will look for classes
				in 'models', 'components' and 'controlers' folders that you
				created earlier. Unless you have great ideas on how to improve
				the current system, there is no need to add more folders to the
				list.

		NOTE:	Provided that you solved the issue with 'ROOT' variable in the
				previous task, the file should work without any problems. You
				should not edit this file until otherwise instructed.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 7 - DATABASE CLASS
--------------------------------------------------------------------------------

It is now time to add another class to our application that will be used for
establishing database connection. It is a relatively simple class, with a sole
purpose of returning a database instance when called. Should be a simple and
straightforward task.

- ( ) Create a 'Database.php' file in 'components' folder

		NOTE:	You should not have to edit anything in this file, it works as
				is. The contents of the file are:

				----------------------------------------------------------------
				<?php

					/**
					*	Class Database
					*	Component responsible for working with a database
					*/
					class Database {

						/**
				     	*	Establishes connection to a database
				     	*	@return \PDO <p>Object of class PDO for working with database</p>
				     	*/
						public static function getConnection() {

							// Establishing connection
							$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
							$db = new PDO($dsn, DB_USER, DB_PASSWORD);

							// Set default fetch mode
							$db->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);

							// Setting encoding type
							$db->exec("set names utf8");

							return $db;

						}

					}

				?>
				----------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 8 - SECURITY
--------------------------------------------------------------------------------

Security is one of the main concepts in web development. It is very important to
filter user input data, because it can potentially harm your databse or website.
For this reason, I wrote a security class. Its static methods are called
whenever it is necessary to sanitise input data. Just as straightforward as the
previous task.

- ( ) Create a 'Security.php' file in 'components' folder

		NOTE:	Agian, you should not edit anythign in this file. The contents
				of the file are:

				----------------------------------------------------------------
				<?php

					/**
					*	Class Security
					*	Component for securing/sanitising user input
					*/
					class Security {

						/**
						*	Escapes user input by removing HTML entities
						*/
						public static function escape($string) {

							return htmlentities($string, ENT_QUOTES, "UTF-8", false);

						}

						/**
						*	Allows special characters to pass through the filter
						*	Characters: æ Æ ø Ø å Å
						*/
						public static function decodeSpecialChars($encodedValue, $options = array()) {
						    $options += array(
						        'quote'     => ENT_NOQUOTES,
						        'encoding'  => 'UTF-8',
						    );
						    return preg_replace_callback(
						        '/(&aring;|&Aring;|&aelig;|&AElig;|&oslash;|&Oslash;)/',
						        create_function(
						            '$m',
						            'return html_entity_decode($m[0], ' . $options['quote'] . ', "' .
						            $options['encoding'] . '");'
						        ),
						        $encodedValue
						    );
						}

					}

				?>
				----------------------------------------------------------------

		NOTE:	If you inspect the file, you will see that one of its methods is
				a sort of filter for non-unicode letters (e.g. Norwegian
				letters). This function is especially important when sending
				emails in languages other than English.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 9 - VIEW
--------------------------------------------------------------------------------

Another class you need to add is a 'View' class. This class is responsible for
rendering pages. In general terms. the page consists of a header, a body and a
footer. The 'View' class combines content of these sections and outputs them in
form of a view, a webpage that you see.

- ( ) Create a 'View.php' file in 'components' folder

		NOTE:	The contents of the file are:

				----------------------------------------------------------------
				<?php

					/**
					*	Class View
					*	Component for rendering a view
					*/
					class View {

						// Property that holds header path
						protected static $headerPath = ROOT . '/views/layout/header.php';

						// Property that holds footer path
						protected static $footerPath = ROOT . '/views/layout/footer.php';

						// Renders the page
						public static function render($path, $vars = array()) {

							// Extract variables
							extract($vars);

							// Include header
							require_once(static::$headerPath);

							// Include page content
							require_once($path);

							// Include footer
							require_once(static::$footerPath);

						}

					}

				?>
				----------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 10 - LANGUAGE MODEL
--------------------------------------------------------------------------------

Because 'Router' class is tightly couples with a 'Language' class, we cannot yet
move on to adding a 'Router' class. By adding all of the small components first,
we can ensure that all components will click into place once 'Router' class is
added.

Now, in this task, we are working with a model called 'Language'. Models only
work with a database. This particular model is responsible for translating our
websites. It fetches translations from our databse tables and delivers them to a
controller, which we will get to later.

- ( ) Create a 'Language.php' file in 'models' folder

		NOTE:	The contents of 'Language.php' file are:

				----------------------------------------------------------------
				<?php

					/*
					*	DATABASE TABLES
					*		1) languages table
					*		2) fields table
					*		3) lang_no table
					*		4) lang_en table
					*		5) lang_ru table
					*
					*	1. LANGUAGES TABLE STRUCTURE
					*		1) code 		- varchar(2) 	- primary key
					*		2) name 		- varchar(15)
					*		3) is_defualt 	- tinyint(1) 	- default 0 (has to be one default language = 1)
					*
					*	2. FIELDS TABLE STRUCTURE
					*		1) field_name	- varchar(255)	- primary key
					*		2) page_prefix	- varchar(255)
					*
					*	3. LANG_NO TABLE STRUCTURE
					*		1) field_name	- varchar(255)	- primary key
					*		2) translation	- text
					*
					*	4. LANG_EN TABLE STRUCTURE
					*		1) field_name	- varchar(255)	- primary key
					*		2) translation	- text
					*
					*	4. LANG_RU TABLE STRUCTURE
					*		1) field_name	- varchar(255)	- primary key
					*		2) translation	- text
					*/

					/**
					*	Class Language
					*	Model responsible for working with languages
					*/
					class Language {

						/**
				     	*	Retrieves a language from URI
				     	*/
						public static function getLanguage(&$uri) {

							// Split current $uri into segments and get the first segment
							$segments = explode('/', $uri);
							$firstSegment = $segments[0];

							// Prepare $language variable;
							$language = '';

							// Check whether language exists in the database and assign itself or get default language
							if ($language = self::checkLanguageExists($firstSegment)) {
								unset($segments[0]);
							} else {
								$language = self::getDefaultLanguage();
							}

							// Store language in session
							$_SESSION['languageID'] = $language;

							// Rebuild original $uri without language indicator
							$uri = implode($segments, '/');

							return true;

						}

						/**
				     	*	Checks whether input $language exists in the database
				     	*/
						private static function checkLanguageExists($language) {

							// Connect to Database
							$db = Database::getConnection();

							// Database query
							$sql = "SELECT code FROM languages WHERE code = :language";

							// Get query results using prepared query
							$stmt = $db->prepare($sql);
							$stmt->bindParam(':language', $language, PDO::PARAM_STR);
							$stmt->execute();

							// Return language if it exists in the database
							if ($result = $stmt->fetch()) {
								return $result['code'];
							}

							return false;

						}

						/**
				     	*	Retrieves default language from the database
				     	*/
						public static function getDefaultLanguage() {

							// Connect to Database
							$db = Database::getConnection();

							// Database query
							$sql = "SELECT code FROM languages WHERE is_default = true";

							// Get query results using prepared query
							$stmt = $db->prepare($sql);
							$stmt->execute();

							// Return default language if it exists in the database
							if ($result = $stmt->fetch()) {
								return $result['code'];
							}

							return false;

						}

						/**
						*	Retrieves a translation of a specific page
						*/
						public static function getTranslation($pagePrefix) {

							// Get controlller name and convert it into prefix
							$controllerName = lcfirst(str_replace('Controller', '' ,debug_backtrace()[1]['class']));
							$controllerNamePrefix = $controllerName . '_all';

							// Get language table name
							$langTable = 'lang_' . Security::escape($_SESSION['languageID']);

							// Connect to Database
							$db = Database::getConnection();

							// Database query
							$sql = "SELECT	lang.field_name AS field,
											lang.translation AS translation
									FROM	fields fields,
											" . $langTable . " lang
									WHERE	fields.field_name = lang.field_name
									AND 	(fields.page_prefix = :prefix1
												OR fields.page_prefix = 'all'
												OR fields.page_prefix = :prefix2)";

							// Get query results using prepared query
							$stmt = $db->prepare($sql);
							$stmt->bindParam(':prefix1', $pagePrefix, PDO::PARAM_STR);
							$stmt->bindParam(':prefix2', $controllerNamePrefix, PDO::PARAM_STR);
							$stmt->execute();

							// Prepare storage variable
							$resultArray = array();

							// Return query result if it exists in the database
							while ($result = $stmt->fetch()) {
								$resultArray[$result['field']] = $result['translation'];
							}

							return $resultArray;

						}

					}

				?>
				----------------------------------------------------------------

		NOTE:	If you are interested, you can inspect how the file is set up.
				At the top, there is a brief overview of a database. There is
				information about tables, and the columns within them. Then, you
				have all the different methods that are used throughout the
				application.

- ( ) Create necessary database tables and define their columns

		NOTE:	You have all the necessary information on how to create the
				tables and define their columns. The only thing you are missing
				is the actual data that goes into those columns. Do not worry
				about that yet.

		NOTE:	If all else fails and you find yourself in a situation where you
				do not know what to do, you can create/import tables in
				phpMyAdmin by running SQL code you will find below.

		NOTE:	If all else fails, contact me.

	- ( ) 'languages' table

		NOTE:	You can start filling in data into this table using phpMyAdmin.
				Data is the following:

				----------------------------------------------------------------

				-------------------------------------------
				|   code   |     name    |   is_default   |
				-------------------------------------------
				|    en    |   English   |        0       |
				-------------------------------------------
				|    no    |  Norwegian  |        1       |
				-------------------------------------------
				|    ru    |   Russian   |        0       |
				-------------------------------------------

				----------------------------------------------------------------

		NOTE:	You can create 'language' table by running the following code:

				----------------------------------------------------------------
				SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
				SET time_zone = "+00:00";

				CREATE TABLE IF NOT EXISTS `languages` (
					`code` varchar(2) COLLATE utf8_unicode_ci NOT NULL,
					`name` varchar(15) COLLATE utf8_unicode_ci NOT NULL,
					`is_default` tinyint(1) NOT NULL DEFAULT '0'
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

				ALTER TABLE `languages`
				ADD PRIMARY KEY (`code`);
				----------------------------------------------------------------

	- ( ) 'fields' table

		NOTE:	You can create 'fields' table by running the following code:

				----------------------------------------------------------------
				SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
				SET time_zone = "+00:00";

				CREATE TABLE IF NOT EXISTS `fields` (
					`field_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`page_prefix` varchar(255) COLLATE utf8_unicode_ci NOT NULL
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

				ALTER TABLE `fields`
				ADD PRIMARY KEY (`field_name`);
				----------------------------------------------------------------

	- ( ) 'lang_en' table

		NOTE:	You can create 'lang_en' table by running the following code:

				----------------------------------------------------------------
				SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
				SET time_zone = "+00:00";

				CREATE TABLE IF NOT EXISTS `lang_en` (
					`field_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`translation` text COLLATE utf8_unicode_ci NOT NULL
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

				ALTER TABLE `lang_en`
				ADD PRIMARY KEY (`field_name`);
				----------------------------------------------------------------


	- ( ) 'lang_no' table

		NOTE:	You can create 'lang_no' table by running the following code:

				----------------------------------------------------------------
				SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
				SET time_zone = "+00:00";

				CREATE TABLE IF NOT EXISTS `lang_no` (
					`field_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`translation` text COLLATE utf8_unicode_ci NOT NULL
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

				ALTER TABLE `lang_no`
				ADD PRIMARY KEY (`field_name`);
				----------------------------------------------------------------

	- ( ) 'lang_ru' table

		NOTE:	'lang_ru' table is just like any other 'lang_*' table.

		NOTE:	You can create 'lang_ru' table by running the following code:

				----------------------------------------------------------------
				SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
				SET time_zone = "+00:00";

				CREATE TABLE IF NOT EXISTS `lang_ru` (
					`field_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`translation` text COLLATE utf8_unicode_ci NOT NULL
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

				ALTER TABLE `lang_ru`
				ADD PRIMARY KEY (`field_name`);
				----------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 11 - ROUTES TABLE
--------------------------------------------------------------------------------

In order for our router to work, we need a set of routes. Think of them as
instructions of where to go and what to do. In terms of a website, routes tell
our MVC application which controller and which method of that controller are to
be run, based on user input in the address bar.

Current implementation of MVC houses all routes in a 'routes' table in our
database. You task is to recreate that table and insert a bare minimum in order
for the application to work.

- ( ) Create a 'routes' table

		NOTE:	You can create 'routes' table by running the following code:

				----------------------------------------------------------------
				SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
				SET time_zone = "+00:00";

				CREATE TABLE IF NOT EXISTS `routes` (
					`id` int(11) NOT NULL,
					`uri` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`controller` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`action` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`params` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
					`page_prefix` varchar(255) COLLATE utf8_unicode_ci NOT NULL
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

				INSERT INTO `routes` (`id`, `uri`, `controller`, `action`, `params`, `page_prefix`) VALUES
				(0, '', 'main', 'index', '', 'main_'),
				(1, '.+', 'main', 'error404', '', 'err404_');

				ALTER TABLE `routes`
				ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `uri` (`uri`);
				----------------------------------------------------------------

		NOTE:	This will create a 'routes' table and populate it with the
				minimum required data. You will be adding routes to this table
				as we proceed with the application, so get familiar with it.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 12 - ROUTER CLASS
--------------------------------------------------------------------------------

Now on to the ultimate task of adding a 'Router' class. As you might have
already understood, this class analyses the address entered by a user into the
address bar and matches it with a correct route from the 'routes' table. From
then on, it uses this information to run the correct method of the correct
controller. Look through the code, it is quite interesting!

- ( ) Create a 'Router.php' file in 'components' folder

		NOTE:	You should use the following code:

				----------------------------------------------------------------
				<?php

					/*
					*	DATABASE TABLES
					*		1) routes table
					*
					*	1. ROUTES TABLE STRUCTURE
					*		1) id			- int(11)		- primary
					*		2) uri 			- varchar(255) 	- unique
					*		3) controller	- varchar(255)
					*		4) action	 	- varchar(255)
					*		5) params	 	- varchar(255)
					*		6) page_prefix 	- varchar(255)
					*
					*/

					/**
					*	Class Router
					*	Component for working with routes
					*/
					class Router {

						/**
				     	*	Property for storing an array of routes
				     	*	@var array
				     	*/
						private $routes;

						/**
				     	*	Constructor method
				     	*/
						public function __construct() {

							// Get an array of routes
							$this->routes = $this->getRoutes();

						}

						/**
						*	Returns a array of routes from database
						*/
						private function getRoutes() {

							// Connect to Database
							$db = Database::getConnection();

							// Database query
							$sql = "SELECT uri, controller, action, params, page_prefix FROM routes ORDER BY id DESC";

							// Get query results using prepared query
							$stmt = $db->prepare($sql);
							$stmt->execute();

							// Prepare storage variable
							$resultArray = array();

							// Return query result if it exists in the database
							while ($result = $stmt->fetch()) {
								$uri = array_shift($result);
								$resultArray[$uri] = $result;
							}

							return $resultArray;

						}

						/**
						*	Returns request string
						*	@return string
						*/
						private function getURI() {

							// Check that the request URI is not an empty string
							if (!empty($_SERVER['REQUEST_URI'])) {

								// If path modifier is only a slash (most cases), trim slashes, otherwise also replace PATH_MOD with a slash
								if (PATH_MOD === '/') {

									return trim(Security::escape($_SERVER['REQUEST_URI']), '/');

								} else {

									return trim(str_replace(PATH_MOD, '', Security::escape($_SERVER['REQUEST_URI'])), '/');;

								}

							}

						}

						/**
				     	*	Method for request handling
				     	*/
						public function run() {

							// Get URI
							$uri = $this->getURI();

							// Get language
							Language::getLanguage($uri);

							// Prepare a result variable
							$result = null;

							// Check that URI request is present in routes.php
							foreach ($this->routes as $uriPattern => $settings) {

								$tempPattern = '^' . $uriPattern . '$';

								// Comparison of $uriPattern and $uri
								if (preg_match("~$tempPattern~", $uri)) {

									// Determine the controller and action and parameters
									$controllerName = ucfirst($settings['controller'] . 'Controller');

									$actionName = 'action' . ucfirst($settings['action']);

									$parameters = explode('/', preg_replace("~$uriPattern~", $settings['params'], $uri));

									define('PAGE_PREFIX', $settings['page_prefix']);

									// Connect controller file
									$controllerFile = ROOT . '/controllers/' . $controllerName . '.php';

									if (file_exists($controllerFile)) {

										include_once($controllerFile);

										// Create an object and call a method
										$controllerObject = new $controllerName;

										// Check whether $actionName method exists in $controllerObject class
										if (method_exists($controllerObject, $actionName)) {

											// If it does, call $actionName method of $controllerObject class
											$result = call_user_func_array(array($controllerObject, $actionName), $parameters);

										} else {

											// Otherwise, redirect to a 404 error page
											$result = call_user_func_array(array($controllerObject, 'actionError404'), $parameters);

										}

									}

									// If method is called successfully, break out of the loop
									if ($result != null) {
										break;
									}

								}

							}

							// If there are no matches in the database redirect to 404 page
							if ($result === null) {

								// Redirect to a 404 error page
								include_once(ROOT . '/controllers/MainController.php');
								$controllerObject = (new MainController())->actionError404();

							}

						}

					}

				?>
				----------------------------------------------------------------

		NOTE:	Take a look at the database table specification at the top of the
				class. You should already be familiar with the format.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 13 - SETTING UP MAIN CONTROLLER
--------------------------------------------------------------------------------

You have now implemented a 'Router' class and provided with some routes. But you
are still missing a very important component in this puzzle. It is namely a
controller. Controller's function is to activate a necessary view and and
provide that view with necessary data (one example is an array of translations).

All controllers have a name convention. An example you will work with in this
section is 'MainController'. Notice how you have two parts: 'Main' and
'Controller'. 'Main' is the name you come up with yourself. It should group
together views that are related. 'Controller' is a naming convention used for
identifying a controller.

Each controller has actions (or methods). These actions tell you which view is
to be loaded. They too have a naming convention. An example is 'actionIndex'.
'action' is just a convention for identifying an action and 'Index' with a
capital letter is the name of the action you want to perform.

Main controller is responsible for very general tasks. In our case, it will
display our index page and a 404 error page.

Other pages (e.g. 'About Us') will have their own controllers with their own
actions. We will get to that later.

- ( ) Create a 'MainController.php' file in 'controllers' folder.

		NOTE:	Use the following code:

				----------------------------------------------------------------
				<?php

					class MainController {

						public function actionError404() {

							// Get relevant page translation
							$translation = Language::getTranslation(PAGE_PREFIX);

							// Collect all data to be passed to the view
							$data = array(
								'translation' => $translation
							);

							// Get location to redirect to
							$location = Security::escape($_SESSION['languageID']) === 'en' ? '/en' : '/';

							// Redirect to the correct location
							header('Location: ' . $location);

							exit();

							return true;

						}

						public function actionIndex() {

							// Get relevant page translation
							$translation = Language::getTranslation(PAGE_PREFIX);

							// Collect all data to be passed to the view
							$data = array(
								'translation' => $translation
							);

							View::render(ROOT . '/views/main/index.php', $data);

							return true;

						}

					}

				?>
				----------------------------------------------------------------

		NOTE:	'actionIndex' method is fully functioning and your should not be
				editing it. 'actionError404', on the other hand, is something
				we will have to work with. There are at least three options to
				go about implementing an error page. The first method is simply
				to redirect to a home page, as is done in the code above. The
				second method involves creating a custom 404 error page, in
				which case the code will have to be altered. You will need to
				decide what to do.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 14 - HEADER AND FOOTER LAYOUTS
--------------------------------------------------------------------------------

If you look closely, an action loads a view (but it does not have to). If you
remember, a view consists of a header, a body and a footer. In this task, you
will create the header and the footer. You will create the most basic versions
of them and add to them as we proceed with our website.

- ( ) Create a 'header.php' file in 'envisage/views/layout' folder

		NOTE:	Use the following code:

				----------------------------------------------------------------
				<!DOCTYPE html>
				<html>
					<head>
						<meta charset="utf-8">
						<title></title>
					</head>
					<body>
				----------------------------------------------------------------

- ( ) Create a 'footer.php' file in 'envisage/views/layout' folder

		NOTE:	Use the following code:

				----------------------------------------------------------------
					</body>
				</html>
				----------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 15 - HELLO WORLD!
--------------------------------------------------------------------------------

You have finally made it to the 'Hello World!' part. Congratulations! Now, this
task is simple. You will have to create the body of your index page.

- ( ) Create 'index.php' in 'envisage/views/main' folder

		NOTE:	In order to test that everything works, try to echo something
				out. For example:

				----------------------------------------------------------------
				<?php

				echo 'Hello World!';

				?>
				----------------------------------------------------------------

		NOTE:	If you encounter any errors, this is the time to fix them,
				because in order for the rest to work, this has to work without
				any bugs. Clockwork, sir!

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 16
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 17
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 18
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 19
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
( ) TASK 20
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

================================================================================